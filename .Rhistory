if (number > 0) {
return(icon("caret-up"))
} else if (number < 0) {
return(icon("caret-down"))
} else {
return(icon("lock"))
}
getChangeIconWrapper <- function(number, type = "icon") {
if (type == "icon") {
return(getChangeIcon_(number))
} else {
return(getChangeIcon(number))
}
getDiffValueAndSign <- function(number) {
if (number >= 0) {
return(paste0("+", number))
} else {
return(number)
}
generateColorStyle <- function(data, colors, by) {
breaks <- seq(0, max(ifelse(is.na(data), 0, data), na.rm = T), by = by)
colorPanel <- colorRampPalette(colors)(length(breaks) + 1)
return(list(cuts = breaks, values = colorPanel))
}
runApp('server')
t(
#       icon("map-marked-alt"),
#       ("Situation in Each Prefecture")
#     ),
#     closable = F,
#     collapsible = T,
#     width = 12,
#     tabsetPanel(
#       source(
#         file = paste0(COMPONENT_PATH, "/Main/ConfirmedMap.ui.R"),
#         local = T,
)
runApp('server')
mhlwSummaryPath <- paste0(DATA_PATH, "/MHLW/summary.csv")
DATA_PATH <- "~/OneDrive/rdirectory/dashb/Dashboard/"
mhlwSummaryPath <- paste0(DATA_PATH, "/MHLW/summary.csv")
mhlwSummary <- fread(file = mhlwSummaryPath)
View(mhlwSummary)
colnames(mhlwSummary)
DATA_PATH <- "~/OneDrive/rdirectory/dashb/Dashboard/"
mhlwSummaryPath <- paste0(DATA_PATH, "/MHLW/summary1.csv")
mhlwSummary <- fread(file = mhlwSummaryPath)
mhlwSummary$date <- as.Date(as.character(mhlwSummary$date), "%Y%m%d")
mhlwSummary <- mhlwSummary[order(Name_region, date)]
setnafill(mhlwSummary, type = "locf", cols = c("Positive", "Discharged", "Tested"))
runApp('server')
mainValueSub = paste0(round(sum(mhlwSummary[date == max(date)]$Discharged)
)
DATA_PATH <- "~/OneDrive/rdirectory/dashb/Dashboard/"
mhlwSummaryPath <- paste0(DATA_PATH, "/MHLW/summary1.csv")
mhlwSummary <- fread(file = mhlwSummaryPath)
mhlwSummary$date <- as.Date(as.character(mhlwSummary$date), "%Y%m%d")
mhlwSummary <- mhlwSummary[order(Name_region, date)]
setnafill(mhlwSummary, type = "locf", cols = c("Positive", "Discharged", "Tested"))
runApp('server')
mhl <- fread("~/OneDrive/rdirectory/dashb/Dashboard/MHLW/summary.csv")
mhl
colnames(mhl)
colnames(mhlwSummary)
output$pcrSparkLine <- renderSparkline({
sparkline(
tail(mhlwSummary[, .(cumsum = sum(Positive, na.rm = T)), by = "date"][, .(diff = cumsum - shift(cumsum))], n = 28)[[1]],
type = "bar", width = 100, barColor = "white"
)
})
output$confirmedSparkLine <- renderSparkline({
value <- rowSums(byDate[, 2:ncol(byDate), with = T])
value <- value[(length(value) - 28):length(value)]
sparkline(value, type = "bar", width = 100, barColor = "white")
})
output$dischargeSparkLine <- renderSparkline({
sparkline(
tail(mhlwSummary[, .(cumsum = sum(Discharged, na.rm = T)), by = "date"][, .(diff = cumsum - shift(cumsum))], n = 28)[[1]],
type = "bar", width = 100, barColor = "white"
)
})
output$deathSparkLine <- renderSparkline({
value <- rowSums(death[, 2:ncol(death), with = T])
value <- value[(length(value) - 28):length(value)]
sparkline(value, type = "bar", width = 100, barColor = "white")
})
runApp('server')
shiny::runApp('server')
library(shiny)
library(shinydashboard)
library(data.table)
library(DT)
library(ggplot2)
library(shinycssloaders)
library(shinydashboardPlus)
library(shinyWidgets)
library(leaflet)
library(rjson)
library(htmltools)
library(leaflet.minicharts)
library(echarts4r)
library(sparkline)
library(shinyBS)
library(shiny.i18n)
library(countup)
DATA_PATH <- "~/OneDrive/rdirectory/dashb/Dashboard/"
mhlwSummaryPath <- paste0(DATA_PATH, "/MHLW/summary1.csv")
mhlwSummary <- fread(file = mhlwSummaryPath)
mhlwSummary$date <- as.Date(as.character(mhlwSummary$date), "%Y%m%d")
mhlwSummary <- mhlwSummary[order(Name_region, date)]
setnafill(mhlwSummary, type = "locf", cols = c("Positive", "Discharged", "Tested"))
runApp('server')
fluidRow(
column(
width = 5,
style = "padding:0px;",
widgetUserBox(
title = ("Novel Coronavirus"),
subtitle = ("Coronavirus disease 2019 (COVID-19)"),
width = 12,
type = NULL,
src = "ncov.jpeg",
color = "purple",
collapsible = F,
background = T,
footer_padding = F,
backgroundUrl = "ncov_back.jpg",
# tags$p(dashboardLabel(status = 'danger',  # APIアクセスできなかった
#                       style = 'square',
#                       paste(sep = ' | ', lang[[langCode]][71], # ページ閲覧数
#                             statics$result$totals$pageviews$all)
#                       ),
#        dashboardLabel(status = 'success',
#                       style = 'square',
#                       paste(sep = ' | ', lang[[langCode]][72], # 閲覧者数
#                             statics$result$totals$uniques)
#        )
#        ),
)
fluidPage(
Component.Notification(
status = "danger",
context = paste0(
"1. Due to the limited performance of the server used on this site, some caches are stored in the browser.",
"If the screen display is strange or the value is not updated, reload or clear the cache and access again.",
"2. Since May 9, the standards for releasing data from the Ministry of Health, Labor and Welfare have changed significantly, so it is necessary to deal with all figures other than the number of infected people and the number of deaths. Please note that data such as the number of discharged patients and the number of tests will not be updated until the response is completed."
)
),
source(
file = ( "~/OneDrive/rdirectory/dashb/Dashboard/FirstRow.ui.R"), #/Users/yusterronoh/OneDrive/rdirectory/dashb/Dashboard
local = T,
encoding = "UTF-8"
)$value,
)
# parkline for confirmed and deaths  ====
output$pcrSparkLine <- renderSparkline({
sparkline(
tail(mhlwSummary[, .(cumsum = sum(Positive, na.rm = T)), by = "date"][, .(diff = cumsum - shift(cumsum))], n = 28)[[1]],
type = "bar", width = 100, barColor = "white"
)
})
valueBox(
width = 6,
value = tagList(
countup(mainValue),
tags$small(paste0("| ", mainValueSub),
style = "color:white;font-size:16px;margin-top:10px;margin-right:10px;opacity:0.8"
)
),
subtitle = tagList(
"　",
sparklineOutput(sparklineName),
tags$span(
countup(diffNumber),
getChangeIconWrapper(diffNumber),
text,
style = "float:right;"
)
),
icon = icon(icon),
color = color
)
runApp('server')
Component.MainValueBox <-
function(mainValue,
mainValueSub,
sparklineName,
diffNumber,
text,
icon,
color) {
valueBox(
width = 6,
value = tagList(
countup(mainValue),
tags$small(paste0("| ", mainValueSub),
style = "color:white;font-size:16px;margin-top:10px;margin-right:10px;opacity:0.8"
)
),
subtitle = tagList(
"　",
sparklineOutput(sparklineName),
tags$span(
countup(diffNumber),
getChangeIconWrapper(diffNumber),
text,
style = "float:right;"
)
),
icon = icon(icon),
color = color
)
}
runApp('server')
output$pcrSparkLine <- renderSparkline({
sparkline(
tail(mhlwSummary[, .(cumsum = sum(Positive, na.rm = T)), by = "date"][, .(diff = cumsum - shift(cumsum))], n = 28)[[1]],
type = "bar", width = 100, barColor = "white"
)
})
output$confirmedSparkLine <- renderSparkline({
value <- rowSums(byDate[, 2:ncol(byDate), with = T])
value <- value[(length(value) - 28):length(value)]
sparkline(value, type = "bar", width = 100, barColor = "white")
})
output$dischargeSparkLine <- renderSparkline({
sparkline(
tail(mhlwSummary[, .(cumsum = sum(Discharged, na.rm = T)), by = "date"][, .(diff = cumsum - shift(cumsum))], n = 28)[[1]],
type = "bar", width = 100, barColor = "white"
)
})
output$deathSparkLine <- renderSparkline({
value <- rowSums(Death[, 2:ncol(Death), with = T])
value <- value[(length(value) - 28):length(value)]
sparkline(value, type = "bar", width = 100, barColor = "white")
})
Component.MainValueBox <-
function(mainValue,
mainValueSub,
sparklineName,
diffNumber,
text,
icon,
color) {
valueBox(
width = 6,
value = tagList(
countup(mainValue),
tags$small(paste0("| ", mainValueSub),
style = "color:white;font-size:16px;margin-top:10px;margin-right:10px;opacity:0.8"
)
),
subtitle = tagList(
"　",
sparklineOutput(sparklineName),
tags$span(
countup(diffNumber),
getChangeIconWrapper(diffNumber),
text,
style = "float:right;"
)
),
icon = icon(icon),
color = color
)
}
# Explanation of the impact of matching the number of discharges
Component.MainValueBox.Info <-
function(mainValue,
mainValueSub,
sparklineName,
diffNumber,
text,
icon,
color) {
valueBox(
width = 6,
value = tagList(
countup(mainValue),
tags$small(paste0("| ", mainValueSub),
tags$span(id = "discharged_info", icon("info-circle")),
bsTooltip(id = "discharged_info",
title = sprintf(("The number of confirmed discharges is% s, and other% s discharges are in the process of matching with individual positives. Therefore, the total number of hospitalizations and discharges does not match the number of positive PCR tests. <br><br> *From April 22, 2nd year of Reiwa, the standard for the number of discharged patients released by the Ministry of Health, Labor and Welfare has changed."),
mainValueSub, (mainValue - mainValueSub)),
placement = "right"),
style = "color:white;font-size:16px;margin-top:10px;margin-right:10px;opacity:0.8"
)
),
subtitle = tagList(
"　",
sparklineOutput(sparklineName),
tags$span(
countup(diffNumber),
getChangeIconWrapper(diffNumber),
text,
style = "float:right;"
)
),
icon = icon(icon),
color = color
)
}
runApp('server')
getFinalAndDiff <- function(vector) {
index <- length(vector)
return(list("final" = vector[index], "diff" = vector[index] - vector[index - 1]))
}
getFileUpdateTime <- function(file) {
fileUpdateTime <- file.info(file)$mtime
latestUpdateDuration <- difftime(Sys.time(), fileUpdateTime)
return(paste0(round(latestUpdateDuration[[1]], 0)
))
}
convertUnit2Ja <- function(x) {
x <- as.character(units(x))
if (x == "secs") {
} else if (x == "mins") {
} else if (x == "hours") {
} else if (x == "days") {
} else if (x == "weeks") {
} else {
return(paste(x, "ago"))
}
getChangeIcon <- function(number) {
if (number > 0) {
return("fa fa-caret-up")
} else if (number < 0) {
return("fa fa-caret-down")
} else {
return("fa fa-lock")
}
getChangeIcon_ <- function(number) {
if (number > 0) {
return(icon("caret-up"))
} else if (number < 0) {
return(icon("caret-down"))
} else {
return(icon("lock"))
}
getChangeIconWrapper <- function(number, type = "icon") {
if (type == "icon") {
return(getChangeIcon_(number))
} else {
return(getChangeIcon(number))
}
getDiffValueAndSign <- function(number) {
if (number >= 0) {
return(paste0("+", number))
} else {
return(number)
}
generateColorStyle <- function(data, colors, by) {
breaks <- seq(0, max(ifelse(is.na(data), 0, data), na.rm = T), by = by)
colorPanel <- colorRampPalette(colors)(length(breaks) + 1)
return(list(cuts = breaks, values = colorPanel))
}
runApp('server')
shinyEffectsGallery()
library(shinyEffects)
shinyEffectsGallery()
?shinyEffectsGallery
shinyEffectsGallery()
shinyEffectsGallery(app.R)
if (interactive()) {
shinyEffectsGallery()
}
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
library(shinyEffects)
shinyEffectsGallery()
shinyEffectsGallery(ui.R)
?shinyEffects
?shinyEffectsGallery
runApp('server')
Component.MainValueBox <-
function(mainValue,
mainValueSub,
sparklineName,
diffNumber,
text,
icon,
color) {
valueBox(
width = 6,
value = tagList(
countup(mainValue),
tags$small(paste0("| ", mainValueSub),
style = "color:white;font-size:16px;margin-top:10px;margin-right:10px;opacity:0.8"
)
),
subtitle = tagList(
"　",
sparklineOutput(sparklineName),
tags$span(
countup(diffNumber),
getChangeIconWrapper(diffNumber),
text,
style = "float:right;"
)
),
icon = icon(icon),
color = color
)
}
library(shiny)
library(shinydashboard)
library(data.table)
library(DT)
library(ggplot2)
library(shinycssloaders)
library(shinydashboardPlus)
library(shinyWidgets)
library(leaflet)
library(rjson)
library(htmltools)
library(leaflet.minicharts)
library(echarts4r)
library(sparkline)
library(shinyBS)
library(shiny.i18n)
library(countup)
DATA_PATH <- "~/OneDrive/rdirectory/dashb/Dashboard/"
mhlwSummaryPath <- paste0(DATA_PATH, "/MHLW/summary1.csv")
mhlwSummary <- fread(file = mhlwSummaryPath)
mhlwSummary$date <- as.Date(as.character(mhlwSummary$date), "%Y%m%d")
mhlwSummary <- mhlwSummary[order(Name_region, date)]
setnafill(mhlwSummary, type = "locf", cols = c("Positive", "Discharged", "Tested"))
runApp('server')
fluidRow(
column(
width = 12,
style = "padding:0px;",
widgetUserBox(
title = ("Novel Coronavirus"),
subtitle = ("Coronavirus disease 2019 (COVID-19)"),
width = 12,
type = NULL,
src = "ncov.jpeg",
color = "purple",
collapsible = F,
background = T,
footer_padding = F,
backgroundUrl = "ncov_back.jpg",
# tags$p(dashboardLabel(status = 'danger',  # APIアクセスできなかった
#                       style = 'square',
#                       paste(sep = ' | ', lang[[langCode]][71], # ページ閲覧数
#                             statics$result$totals$pageviews$all)
#                       ),
#        dashboardLabel(status = 'success',
#                       style = 'square',
#                       paste(sep = ' | ', lang[[langCode]][72], # 閲覧者数
#                             statics$result$totals$uniques)
#        )
#        ),
)
column(
width = 7,
fluidRow(
Component.MainValueBox(
mainValue = sum(mhlwSummary[date == max(date)]$Tested, na.rm = T),
mainValueSub = getFileUpdateTime(mhlwSummaryPath),
sparklineName = "pcrSparkLine",
diffNumber = (sum(mhlwSummary[date == max(date)]$Tested) - sum(mhlwSummary[date == max(date) - 1]$Tested, na.rm = T)),
text = ("Tested"),
icon = "vials",
color = "yellow"
),
Component.MainValueBox(
mainValue = 75654,
mainValueSub = 312,
sparklineName = "confirmedSparkLine",
diffNumber = 4325,
text = ("Confirmed"),
icon = "procedures",
color = "red"
)
),
fluidRow(
Component.MainValueBox(
mainValue = sum(mhlwSummary[date == max(date)]$Discharged),
# Discharged / (PCR Positive - クルーズ船帰国の40名 - Death)
mainValueSub = paste0(round(sum(mhlwSummary[date == max(date)]$Discharged) /
(sum(mhlwSummary[date == max(date)]$Positive) - 40 - sum(mhlwSummary[date == max(date)]$Death, na.rm = T)) * 100, 2), "%"),
sparklineName = "dischargeSparkLine",
diffNumber = (sum(mhlwSummary[date == max(date)]$Discharged) - sum(mhlwSummary[date == max(date) - 1]$Discharged, na.rm = T)),
text = ("Recovered"),
icon = "user-shield",
color = "green"
),
Component.MainValueBox(
mainValue = 2345,
mainValueSub = paste0(round(100 * 2345/ 75654, 2), "%"),
sparklineName = "deathSparkLine",
diffNumber = 321,
text = ("Death"),
icon = "bible",
color = "navy"
)
),
fluidRow(column(
width = 12,
style = "padding:0px;",
boxPlus(
width = 12,
actionButton(
inputId = "twitterShare",
label = "Twitter",
icon = icon("twitter"),
onclick = sprintf("window.open()")
)
runApp('server')
