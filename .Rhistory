ggplot(aes(x=(1-abs(x)-sin(y^2)),y=(1+y-cos(x^2))))+
geom_point(alpha=.03,shape=20,size=0)+
theme_void()+
coord_polar()
install.packages(c("AMR", "aweek", "COVID19", "drake", "DT", "future.apply", "gdtools", "GGally", "ggdist", "ggspatial", "janitor", "joineRML", "Matrix", "odds.n.ends", "officer", "paletteer", "parallelly", "prismatic", "Publish", "rgdal", "robustbase", "sf", "terra", "tidytext", "xfun"))
install.packages(c("diffobj", "lamW", "leaflet"))
install.packages(c("bayesplot", "BH", "caTools", "coronavirus", "cpp11", "crosstalk", "distill", "EpiEstim", "epiR", "expm", "formattable", "frequency", "geojsonio", "ggformula", "ggridges", "git2r", "glmnet", "gratia", "greybox", "gtsummary", "hexbin", "hms", "htmltools", "httpuv", "jpmesh", "jtools", "lessR", "magick", "moonBook", "odds.n.ends", "plotly", "pROC", "profileModel", "quantreg", "rclipboard", "RcppArmadillo", "renv", "rgl", "rnoaa", "RSQLite", "sass", "shinytest", "shinyWidgets", "showtext", "sjmisc", "sjPlot", "sjstats", "smooth", "sp", "spatialEco", "spatstat.utils", "SQUAREM", "sysfonts", "tippy", "webdriver"))
install.packages(c("DBI", "deldir", "dplyr", "effectsize", "fabletools", "fansi", "ggrepel", "hdrcde", "insight", "magick", "mosaic", "mosaicCore", "mosaicData", "panelr", "parameters", "Rcpp", "stars", "tibble", "timetk", "VIM", "waiter", "withr"))
install.packages(c("shinyWidgets", "tmap", "tmaptools"))
library(tidyverse)
library(readr)
library(dbplyr)
library(lubridate)
library(zoo)
library(plotly)
mne_raw <- read_csv("https://raw.githubusercontent.com/yuster0/Dashboard/master/monte.csv")
mne_raw
mne <- mne_raw %>%
filter(date >= "2020-03-16") %>%
mutate(
month = month(date, label = TRUE),
new_cases = cases - lag(cases),
new_cases = ifelse(is.na(new_cases), 0, new_cases)
) %>%
select(date, month, cases, new_cases, deaths) %>%
mutate(
seven_day_avg = round(cases / 7, digits = 0),
month = case_when(
month == "Mar" ~ "March",
month == "Apr" ~ "April",
month == "Jun" ~ "June",
month == "Jul" ~ "July",
month == "Aug" ~ "Aug.",
month == "Sep" ~ "Sept.",
month == "Oct" ~ "Oct.",
month == "Nov" ~ "Nov.",
month == "Dec" ~ "Dec.",
TRUE ~ as.character(month)
),
month = fct_relevel(month, "March", "April", "May", "June", "July", "Aug.", "Sept.", "Oct.", "Nov.", "Dec."),
seven_day_avg_2 = round(rollapplyr(new_cases, sum, width = 7, partial = TRUE) / 7),
seven_day_avg_2 = ifelse(seven_day_avg_2 < 0, seven_day_avg, seven_day_avg_2),
new_cases = as.integer(new_cases),
day = day(date),
month_day = paste(month, day, sep = " ")
)%>%
dplyr::rename(seven_day_average = seven_day_avg_2) %>%
select(-6) %>%
select(1, 2, 7, 8, everything())
mne$new_cases[1] <- 88
ggplotly((
mne %>%
ggplot(aes(x = date, y = new_cases)) +
geom_col(width = 1, fill = "#ffb2b2",
aes(text = paste(month_day, "<br>", "New cases:", scales::comma(round(new_cases, digits = 1)), "<br>", "7-day averge:",
scales::comma(seven_day_average)))) +
geom_line(aes(x = date, y = seven_day_average), color = "#ff0000", size = 0.9) +
geom_hline(yintercept = 100, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 200, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 300, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 400, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 500, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 600, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 700, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 800, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 900, linetype = "dashed", alpha = 0.3, size = 0.3) +
scale_y_continuous(labels = scales::comma, expand = c(0, 0)) +
scale_x_date(date_labels = "%b", date_breaks = "1 month", expand = c(0,0)) +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 100, label = "100 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 200, label = "200 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 300, label = "300 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 400, label = "400 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 500, label = "500 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 600, label = "600 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 700, label = "700 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 800, label = "800 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 900, label = "900 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-10-12"), y = 470, label = paste("New", "<br>", "cases", "<br>", "-"), size = 3) +
annotate(geom = "text", x = as.Date("2020-7-10"), y = 180, label = paste("7-day", "<br>", "average","<br>", "-"), size = 3) +
annotate(geom = "text", x = as.Date("2020-8-15"), y = 750, label = paste("2916", "<br>", "last 7 days",
"<br>", "43786 total"), size = 4) +
theme_set(theme_light()) +
labs(
x = "",
y = ""
) +
theme(
panel.grid = element_blank(),
panel.border = element_blank(),
axis.text.x = element_text(hjust = -0.1),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
),
tooltip = "text"
)
mne %>%
ggplot(aes(x = date, y = new_cases)) +
geom_col(width = 1, fill = "#ffb2b2",
aes(text = paste(month_day, "New cases:", scales::comma(round(new_cases, digits = 1)), "7-day average:",
scales::comma(seven_day_average)))) +
geom_line(aes(x = date, y = seven_day_average), color = "#ff0000", size = 0.9) +
geom_hline(yintercept = 100, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 200, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 300, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 400, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 500, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 600, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 700, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 800, linetype = "dashed", alpha = 0.3, size = 0.3) +
scale_y_continuous(labels = scales::comma, expand = c(0, 0)) +
scale_x_date(date_labels = "%b", date_breaks = "1 month", expand = c(0,0)) +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 100, label = "100 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 200, label = "200 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 300, label = "300 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 400, label = "400 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 500, label = "500 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 600, label = "600 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 700, label = "700 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 800, label = "800 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-10-12"), y = 470, label = paste("New cases"), size = 3) +
annotate(geom = "text", x = as.Date("2020-7-10"), y = 145, label = paste("7-day average "), size = 3) +
annotate(geom = "text", x = as.Date("2020-8-15"), y = 750, label = paste("2529 in last 7 days, 43955 Cumulative cases"), size = 4) +
theme_set(theme_light()) +
labs(
x = "",
y = ""
) +
theme(
panel.grid = element_blank(),
panel.border = element_blank(),
axis.text.x = element_text(hjust = -0.1),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
mned <- mne_raw %>%
filter(date >= "2020-04-1") %>%
mutate(
month = month(date, label = TRUE),
new_deaths = deaths - lag(deaths),
new_deaths = ifelse(is.na(new_deaths), 0, new_deaths)
) %>%
select(date, month, cases, new_deaths, deaths) %>%
mutate(
seven_day_avg = round(new_deaths / 7, digits = 0),
month = case_when(
month == "Mar" ~ "March",
month == "Apr" ~ "April",
month == "Jun" ~ "June",
month == "Jul" ~ "July",
month == "Aug" ~ "Aug.",
month == "Sep" ~ "Sept.",
month == "Oct" ~ "Oct.",
month == "Nov" ~ "Nov.",
month == "Dec" ~ "Dec.",
TRUE ~ as.character(month)
),
month = fct_relevel(month, "March", "April", "May", "June", "July", "Aug.", "Sept.", "Oct.", "Nov.", "Dec."),
seven_day_avg_2 = round(rollapplyr(new_deaths, sum, width = 7, partial = TRUE) / 7),
seven_day_avg_2 = ifelse(seven_day_avg_2 < 0, seven_day_avg, seven_day_avg_2),
new_deaths = as.integer(new_deaths),
day = day(date),
month_day = paste(month, day, sep = " ")
)%>%
dplyr::rename(seven_day_average = seven_day_avg_2) %>%
select(-6) %>%
select(1, 2, 7, 8, everything())
mned$new_deaths[1] <- 98
ggplotly((
mned %>%
ggplot(aes(x = date, y = new_deaths)) +
geom_col(width = 1, fill = "#ffb2b2",
aes(text = paste(month_day, "<br>", "New cases:", scales::comma(round(new_deaths, digits = 1)), "<br>", "7-day averge:",
scales::comma(seven_day_average)))) +
geom_line(aes(x = date, y = seven_day_average), color = "#ff0000", size = 0.9) +
geom_hline(yintercept = 5, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 10, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 15, linetype = "dashed", alpha = 0.3, size = 0.3) +
scale_y_continuous(labels = scales::comma, expand = c(0, 0)) +
scale_x_date(date_labels = "%b", date_breaks = "1 month", expand = c(0,0)) +
annotate(geom = "text", x = as.Date("2020-7-1"), y = 5, label = "5 deaths", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-7-1"), y = 10, label = "10 deaths", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-7-1"), y = 15, label = "15 deaths", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-10-12"), y = 5, label = paste("New", "<br>", "deaths", "<br>", "-"), size = 3) +
annotate(geom = "text", x = as.Date("2020-7-10"), y = 3, label = paste("7-day", "<br>", "average","<br>", "-"), size = 3) +
annotate(geom = "text", x = as.Date("2020-8-15"), y = 15, label = paste("2916", "<br>", "last 7 days",
"<br>", "43786 total"), size = 4) +
theme_set(theme_light()) +
labs(
x = "",
y = ""
) +
theme(
panel.grid = element_blank(),
panel.border = element_blank(),
axis.text.x = element_text(hjust = -0.1),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
),
tooltip = "text"
)
install.packages(c("assertive.base", "bayestestR", "boot", "brio", "class", "coronavirus", "Epi", "fastmap", "flextable", "forcats", "gert", "ggthemes", "gratia", "GSODR", "htmltools", "knitr", "MCMCpack", "memoise", "mice", "nnet", "plm", "plotrix", "pracma", "proj4", "quantreg", "rappdirs", "reportfactory", "repr", "reprex", "rgdal", "riverplot", "RSQLite", "sass", "shiny", "shinythemes", "spacetime", "spatial", "spatstat.utils", "stars", "terra", "tinytex", "usmap", "utile.visuals", "vcdExtra", "withr"))
install.packages(c("broom", "cpp11", "furrr", "pixmap", "terra", "tibble"))
install.packages(c("coronavirus", "crayon", "mathjaxr", "matrixStats", "rappdirs"))
install.packages(c("cli", "distributional", "dplyr", "drake", "fable", "flextable", "koRpus", "RcppThread", "rgdal", "shinyWidgets", "systemfonts", "trelliscopejs", "vroom", "wrapr"))
library(tidyverse)
library(readr)
library(dbplyr)
library(lubridate)
library(zoo)
library(plotly)
mne_raw <- read_csv("https://raw.githubusercontent.com/yuster0/Dashboard/master/monte.csv")
mne <- mne_raw %>%
filter(date >= "2020-03-16") %>%
mutate(
month = month(date, label = TRUE),
new_cases = cases - lag(cases),
new_cases = ifelse(is.na(new_cases), 0, new_cases)
) %>%
select(date, month, cases, new_cases, deaths) %>%
mutate(
seven_day_avg = round(cases / 7, digits = 0),
month = case_when(
month == "Mar" ~ "March",
month == "Apr" ~ "April",
month == "Jun" ~ "June",
month == "Jul" ~ "July",
month == "Aug" ~ "Aug.",
month == "Sep" ~ "Sept.",
month == "Oct" ~ "Oct.",
month == "Nov" ~ "Nov.",
month == "Dec" ~ "Dec.",
TRUE ~ as.character(month)
),
month = fct_relevel(month, "March", "April", "May", "June", "July", "Aug.", "Sept.", "Oct.", "Nov.", "Dec."),
seven_day_avg_2 = round(rollapplyr(new_cases, sum, width = 7, partial = TRUE) / 7),
seven_day_avg_2 = ifelse(seven_day_avg_2 < 0, seven_day_avg, seven_day_avg_2),
new_cases = as.integer(new_cases),
day = day(date),
month_day = paste(month, day, sep = " ")
)%>%
dplyr::rename(seven_day_average = seven_day_avg_2) %>%
select(-6) %>%
select(1, 2, 7, 8, everything())
mne$new_cases[1] <- 88
ggplotly((
mne %>%
ggplot(aes(x = date, y = new_cases)) +
geom_col(width = 1, fill = "#ffb2b2",
aes(text = paste(month_day, "<br>", "New cases:", scales::comma(round(new_cases, digits = 1)), "<br>", "7-day averge:",
scales::comma(seven_day_average)))) +
geom_line(aes(x = date, y = seven_day_average), color = "#ff0000", size = 0.9) +
geom_hline(yintercept = 100, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 200, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 300, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 400, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 500, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 600, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 700, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 800, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 900, linetype = "dashed", alpha = 0.3, size = 0.3) +
scale_y_continuous(labels = scales::comma, expand = c(0, 0)) +
scale_x_date(date_labels = "%b", date_breaks = "1 month", expand = c(0,0)) +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 100, label = "100 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 200, label = "200 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 300, label = "300 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 400, label = "400 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 500, label = "500 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 600, label = "600 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 700, label = "700 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 800, label = "800 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 900, label = "900 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-10-12"), y = 470, label = paste("New", "<br>", "cases", "<br>", "-"), size = 3) +
annotate(geom = "text", x = as.Date("2020-7-10"), y = 180, label = paste("7-day", "<br>", "average","<br>", "-"), size = 3) +
annotate(geom = "text", x = as.Date("2020-8-15"), y = 750, label = paste("2916", "<br>", "last 7 days",
"<br>", "43786 total"), size = 4) +
theme_set(theme_light()) +
labs(
x = "",
y = ""
) +
theme(
panel.grid = element_blank(),
panel.border = element_blank(),
axis.text.x = element_text(hjust = -0.1),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
),
tooltip = "text"
)
mne %>%
ggplot(aes(x = date, y = new_cases)) +
geom_col(width = 1, fill = "#ffb2b2",
aes(text = paste(month_day, "New cases:", scales::comma(round(new_cases, digits = 1)), "7-day average:",
scales::comma(seven_day_average)))) +
geom_line(aes(x = date, y = seven_day_average), color = "#ff0000", size = 0.9) +
geom_hline(yintercept = 100, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 200, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 300, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 400, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 500, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 600, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 700, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 800, linetype = "dashed", alpha = 0.3, size = 0.3) +
scale_y_continuous(labels = scales::comma, expand = c(0, 0)) +
scale_x_date(date_labels = "%b", date_breaks = "1 month", expand = c(0,0)) +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 100, label = "100 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 200, label = "200 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 300, label = "300 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 400, label = "400 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 500, label = "500 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 600, label = "600 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 700, label = "700 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-4-1"), y = 800, label = "800 cases", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-10-12"), y = 470, label = paste("New cases"), size = 3) +
annotate(geom = "text", x = as.Date("2020-7-10"), y = 145, label = paste("7-day average "), size = 3) +
annotate(geom = "text", x = as.Date("2020-8-15"), y = 750, label = paste("2529 in last 7 days, 43955 Cumulative cases"), size = 4) +
theme_set(theme_light()) +
labs(
x = "",
y = ""
) +
theme(
panel.grid = element_blank(),
panel.border = element_blank(),
axis.text.x = element_text(hjust = -0.1),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
mned <- mne_raw %>%
filter(date >= "2020-04-1") %>%
mutate(
month = month(date, label = TRUE),
new_deaths = deaths - lag(deaths),
new_deaths = ifelse(is.na(new_deaths), 0, new_deaths)
) %>%
select(date, month, cases, new_deaths, deaths) %>%
mutate(
seven_day_avg = round(new_deaths / 7, digits = 0),
month = case_when(
month == "Mar" ~ "March",
month == "Apr" ~ "April",
month == "Jun" ~ "June",
month == "Jul" ~ "July",
month == "Aug" ~ "Aug.",
month == "Sep" ~ "Sept.",
month == "Oct" ~ "Oct.",
month == "Nov" ~ "Nov.",
month == "Dec" ~ "Dec.",
TRUE ~ as.character(month)
),
month = fct_relevel(month, "March", "April", "May", "June", "July", "Aug.", "Sept.", "Oct.", "Nov.", "Dec."),
seven_day_avg_2 = round(rollapplyr(new_deaths, sum, width = 7, partial = TRUE) / 7),
seven_day_avg_2 = ifelse(seven_day_avg_2 < 0, seven_day_avg, seven_day_avg_2),
new_deaths = as.integer(new_deaths),
day = day(date),
month_day = paste(month, day, sep = " ")
)%>%
dplyr::rename(seven_day_average = seven_day_avg_2) %>%
select(-6) %>%
select(1, 2, 7, 8, everything())
mned$new_deaths[1] <- 98
ggplotly((
mned %>%
ggplot(aes(x = date, y = new_deaths)) +
geom_col(width = 1, fill = "#ffb2b2",
aes(text = paste(month_day, "<br>", "New cases:", scales::comma(round(new_deaths, digits = 1)), "<br>", "7-day averge:",
scales::comma(seven_day_average)))) +
geom_line(aes(x = date, y = seven_day_average), color = "#ff0000", size = 0.9) +
geom_hline(yintercept = 5, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 10, linetype = "dashed", alpha = 0.3, size = 0.3) +
geom_hline(yintercept = 15, linetype = "dashed", alpha = 0.3, size = 0.3) +
scale_y_continuous(labels = scales::comma, expand = c(0, 0)) +
scale_x_date(date_labels = "%b", date_breaks = "1 month", expand = c(0,0)) +
annotate(geom = "text", x = as.Date("2020-7-1"), y = 5, label = "5 deaths", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-7-1"), y = 10, label = "10 deaths", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-7-1"), y = 15, label = "15 deaths", color = "#8c8c8c") +
annotate(geom = "text", x = as.Date("2020-10-12"), y = 5, label = paste("New", "<br>", "deaths", "<br>", "-"), size = 3) +
annotate(geom = "text", x = as.Date("2020-7-10"), y = 3, label = paste("7-day", "<br>", "average","<br>", "-"), size = 3) +
annotate(geom = "text", x = as.Date("2020-8-15"), y = 15, label = paste("2916", "<br>", "last 7 days",
"<br>", "43786 total"), size = 4) +
theme_set(theme_light()) +
labs(
x = "",
y = ""
) +
theme(
panel.grid = element_blank(),
panel.border = element_blank(),
axis.text.x = element_text(hjust = -0.1),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
),
tooltip = "text"
)
install.packages(c("cachem", "dbplyr", "emmeans", "nlme", "performance"))
install.packages(c("assertive.base", "crayon", "feasts", "ks", "multcomp", "outbreaker2", "RcppArmadillo", "rms", "segmented", "spatstat.data", "systemfonts", "TMB", "usethis"))
install.packages("xfun")
install.packages(c("boot", "cachem", "cluster", "crul", "gert", "greybox", "huxtable", "insight", "kableExtra", "lifecycle", "MASS", "mime", "promises", "rgl", "rnoaa", "rstatix", "testthat", "waldo", "XLConnect"))
library(readr)
rt_mne <- read_csv("~/Dropbox/MNE_WHO/rt_mne.csv")
rt_mne1 <- rt_mne %>%
mutate(confirm =cases) %>%
select(date, confirm) %>%
as.data.table()
library(tidyverse)
rt_mne1 <- rt_mne %>%
mutate(confirm =cases) %>%
select(date, confirm) %>%
as.data.table()
library(data.table)
rt_mne1 <- rt_mne %>%
mutate(confirm =cases) %>%
select(date, confirm) %>%
as.data.table()
View(rt_mne1)
monte <- rt_mne1
ads <- monte %>%
slice(1:(n()-4)) %>% # remove last four entries
mutate(rollingmean = c(rep(NA, 3),  # Adding a rolling mean
zoo::rollmean(x = cases, k = 7),
rep(NA, 3)))
View(rt_mne1)
ads <- monte %>%
slice(1:(n()-4)) %>% # remove last four entries
mutate(rollingmean = c(rep(NA, 3),  # Adding a rolling mean
zoo::rollmean(x = confirm, k = 7),
rep(NA, 3)))
View(ads)
ssi_mean_si = 4.7
ssi_std_si = 4.7
confirmed_cases <- ads  %>% drop_na() %>% select(I = rollingmean)
ssi_R <- estimate_R(confirmed_cases,
method = "parametric_si",
config = make_config(list(mean_si = ssi_mean_si,
std_si = ssi_std_si)))
library(tidyverse)
library(EpiEstim)
cdc_mean_si = 3.96
cdc_std_si = 4.75
# SSI
ssi_mean_si = 4.7
ssi_std_si = 4.7
cdc_R <- estimate_R(confirmed_cases,
method = "parametric_si",
config = make_config(list(mean_si = cdc_mean_si,
std_si = cdc_std_si)))
ssi_R <- estimate_R(confirmed_cases,
method = "parametric_si",
config = make_config(list(mean_si = ssi_mean_si,
std_si = ssi_std_si)))
cdc_pd <- cdc_R$R %>%
as_tibble() %>%
select(t = t_end,
R = `Mean(R)`,
lower = `Quantile.0.05(R)`,
upper = `Quantile.0.95(R)`) %>%
mutate(source = "cdc")
ssi_pd <- ssi_R$R %>%
as_tibble() %>%
select(t = t_end,
R = `Mean(R)`,
lower = `Quantile.0.05(R)`,
upper = `Quantile.0.95(R)`) %>%
mutate(source = "ssi")
pd <- bind_rows(cdc_pd, ssi_pd) %>%
mutate(t = (t-1) + as.Date("2020-06-11"))
facetlabs <- c(cdc = "Center for Disease Control",
ssi = "Statens Serum Institut")
ggplot(pd) +
geom_ribbon(aes(x = t, ymin = lower, ymax = upper), fill = "lightgrey") +
geom_line(aes(x = t, y = R)) +
geom_hline(yintercept = 1, linetype = "dashed") +
facet_wrap(~ source, ncol = 1,
labeller = labeller(source = facetlabs)) +
theme_minimal() +
labs(x = "", y = "Effektiv reproduktionstal") +
scale_x_date(breaks = "weeks", labels = scales::date_format("%d-%m"))
ggplot(pd) +
geom_ribbon(aes(x = t, ymin = lower, ymax = upper), fill = "lightgrey") +
geom_line(aes(x = t, y = R)) +
geom_hline(yintercept = 1, linetype = "dashed") +
facet_wrap(~ source, ncol = 1,
labeller = labeller(source = facetlabs)) +
theme_minimal() +
labs(x = "", y = "Effektiv reproduktionstal") +
scale_x_date(breaks = "weeks", labels = scales::date_format("%m-%y"))
ggplot(pd) +
geom_ribbon(aes(x = t, ymin = lower, ymax = upper), fill = "lightgrey") +
geom_line(aes(x = t, y = R)) +
geom_hline(yintercept = 1, linetype = "dashed") +
facet_wrap(~ source, ncol = 1,
labeller = labeller(source = facetlabs)) +
theme_minimal() +
labs(x = "", y = "Effektiv reproduktionstal") +
scale_x_date(breaks = "weeks", labels = scales::date_format("%m"))
ggplot(pd) +
geom_ribbon(aes(x = t, ymin = lower, ymax = upper), fill = "lightgrey") +
geom_line(aes(x = t, y = R)) +
geom_hline(yintercept = 1, linetype = "dashed") +
facet_wrap(~ source, ncol = 1,
labeller = labeller(source = facetlabs)) +
theme_minimal() +
labs(x = "", y = "Effektiv reproduktionstal") +
scale_x_date(breaks = "weeks", labels = scales::date_format("%m-"))
install.packages(c("deldir", "gert", "mgcv", "pubh", "rayimage", "reportfactory", "rsample"))
library(projections)
?projection
install.packages(c("Boom", "broom", "broom.helpers", "cli", "data.table", "flexsurv", "ggraph", "ggsignif", "glmnet", "googleVis", "gtrendsR", "insight", "kableExtra", "parameters", "pillar", "pkgload", "RcppParallel", "Rdpack", "reactR", "rmarkdown", "runner", "shinyjqui", "smooth", "SparseM", "svglite", "tsibble"))
