bottom = "20%",
left = "0%",
inRange = list(color = colorScale),
splitList = splitList,
formatter = legendFormatter
) %>%
e_title(text = "Number of Cases/100K Population") %>%
e_tooltip() %>%
e_timeline_opts(
playInterval = 500,
left = "0%",
right = "0%",
currentIndex = length(unique(total$date)) - 1
) %>%
e_timeline_serie(
title = timeSeriesTitle
)
total %>%
arrange(date) %>%
group_by(date) %>%  #order_by(date)) %>%
e_charts(Countries, timeline = TRUE) %>%
e_map(`Number of cases/100k Population`) %>%
e_visual_map(`Number of cases/100k Population`,
type = "piecewise",
bottom = "20%",
left = "0%",
inRange = list(color = colorScale),
splitList = splitList,
formatter = legendFormatter
) %>%
e_title(text = "Number of Cases/100K Population") %>%
e_tooltip() %>%
e_timeline_opts(
playInterval = 500,
left = "0%",
right = "0%",
currentIndex = length(unique(total$date)) - 1
) %>%
e_timeline_serie(
title = timeSeriesTitle
)
iris %>%
group_by(Species) %>%
e_charts(Sepal.Length, timeline = TRUE) %>%
e_line(Sepal.Width) %>%
e_timeline_serie(
title = list(
list(text = "setosa"),
list(text = "versicolor"),
list(text = "virginica")
)
total %>%
group_by(date) %>%  #order_by(date)) %>%
e_charts(Countries, timeline = TRUE) %>%
e_map(`Number of cases/100k Population`) %>%
e_line(date) %>%
e_visual_map(`Number of cases/100k Population`,
type = "piecewise",
bottom = "20%",
left = "0%",
inRange = list(color = colorScale),
splitList = splitList,
formatter = legendFormatter
) %>%
e_title(text = "Number of Cases/100K Population") %>%
e_tooltip() %>%
e_timeline_opts(
playInterval = 500,
left = "0%",
right = "0%",
currentIndex = length(unique(total$date)) - 1
) %>%
e_timeline_serie(
title = timeSeriesTitle
)
iris %>%
group_by(Species) %>%
e_charts(Sepal.Length, timeline = TRUE) %>%
e_line(Sepal.Width) %>%
e_timeline_serie(
title = list(
list(text = "setosa"),
list(text = "versicolor"),
list(text = "virginica")
)
total %>%
group_by(date) %>%  #order_by(date)) %>%
e_charts(Countries, timeline = TRUE) %>%
e_map(`Number of cases/100k Population`) %>%
e_visual_map(`Number of cases/100k Population`,
type = "piecewise",
bottom = "20%",
left = "0%",
inRange = list(color = colorScale),
splitList = splitList,
formatter = legendFormatter
) %>%
e_line(date) %>%
e_title(text = "Number of Cases/100K Population") %>%
e_tooltip() %>%
e_timeline_opts(
playInterval = 500,
left = "0%",
right = "0%",
currentIndex = length(unique(total$date)) - 1
) %>%
e_timeline_serie(
title = timeSeriesTitle
)
total %>%
group_by(date) %>%  #order_by(date)) %>%
e_charts(Countries, timeline = TRUE) %>%
e_map(`Number of cases/100k Population`) %>%
e_visual_map(`Number of cases/100k Population`,
type = "piecewise",
bottom = "20%",
left = "0%",
inRange = list(color = colorScale),
splitList = splitList,
formatter = legendFormatter
) %>%
e_title(text = "Number of Cases/100K Population") %>%
e_tooltip() %>%
e_timeline_opts(
playInterval = 500,
left = "0%",
right = "0%",
currentIndex = length(unique(total$date)) - 1
)
total %>%
group_by(date) %>%  #order_by(date)) %>%
e_charts(Countries, timeline = TRUE) %>%
e_map(`Number of cases/100k Population`) %>%
e_visual_map(`Number of cases/100k Population`,
type = "piecewise",
bottom = "20%",
left = "0%",
inRange = list(color = colorScale),
splitList = splitList,
formatter = legendFormatter
) %>%
e_title(text = "Number of Cases/100K Population") %>%
e_tooltip() %>%
e_timeline_opts(
playInterval = 500,
left = "0%",
right = "0%",
currentIndex = length(unique(total$date)) - 1
) %>%
e_line(date) %>%
#e_timeline_serie(
title = timeSeriesTitle
)
total %>%
group_by(date) %>%  #order_by(date)) %>%
e_charts(Countries, timeline = TRUE) %>%
e_map(`Number of cases/100k Population`) %>%
e_visual_map(`Number of cases/100k Population`,
type = "piecewise",
bottom = "20%",
left = "0%",
inRange = list(color = colorScale),
splitList = splitList,
formatter = legendFormatter
) %>%
e_title(text = "Number of Cases/100K Population") %>%
e_tooltip() %>%
e_timeline_opts(
playInterval = 500,
left = "0%",
right = "0%",
currentIndex = length(unique(total$date)) - 1
) %>%
e_line(date)
total %>%
group_by(date) %>%  #order_by(date)) %>%
e_charts(Countries, timeline = TRUE) %>%
e_map(`Number of cases/100k Population`) %>%
e_visual_map(`Number of cases/100k Population`,
type = "piecewise",
bottom = "20%",
left = "0%",
inRange = list(color = colorScale),
splitList = splitList,
formatter = legendFormatter
) %>%
e_title(text = "Number of Cases/100K Population") %>%
e_tooltip() %>%
e_timeline_opts(
playInterval = 500,
left = "0%",
right = "0%",
currentIndex = length(unique(total$date)) - 1
) %>%
e_timeline_serie(
title = timeSeriesTitle
)
timeSeriesTitle <- lapply(unique(range(total$date)), function(i) {
return(
list(
text = "Number of Cases/100K Population", #worldCase
subtext = i
)
})
total %>%
group_by(date) %>%  #order_by(date)) %>%
e_charts(Countries, timeline = TRUE) %>%
e_map(`Number of cases/100k Population`) %>%
e_visual_map(`Number of cases/100k Population`,
type = "piecewise",
bottom = "20%",
left = "0%",
inRange = list(color = colorScale),
splitList = splitList,
formatter = legendFormatter
) %>%
e_title(text = "Number of Cases/100K Population") %>%
e_tooltip() %>%
e_timeline_opts(
playInterval = 500,
left = "0%",
right = "0%",
currentIndex = length(unique(total$date)) - 1
) %>%
e_timeline_serie(
title = timeSeriesTitle
)
total %>%
group_by(date) %>%  #order_by(date)) %>%
e_charts(Countries, timeline = TRUE) %>%
e_map(`Number of cases/100k Population`) %>%
e_visual_map(`Number of cases/100k Population`,
type = "piecewise",
bottom = "20%",
left = "0%",
inRange = list(color = colorScale),
splitList = splitList,
formatter = legendFormatter
) %>%
e_title(text = "Number of Cases/100K Population") %>%
e_tooltip() %>%
e_timeline_opts(
playInterval = 500,
left = "0%",
right = "0%",
currentIndex = length(unique(total$date)) - 1
) %>%
e_timeline_serie(
title = timeSeriesTitle
)
timeSeriesTitle <- lapply(unique(total$date), function(i) {
return(
list(
text = "Number of Cases/100K Population", #worldCase
subtext = i
)
})
total %>%
group_by(date) %>%  #order_by(date)) %>%
e_charts(Countries, timeline = TRUE) %>%
e_map(`Number of cases/100k Population`) %>%
e_visual_map(`Number of cases/100k Population`,
type = "piecewise",
bottom = "20%",
left = "0%",
inRange = list(color = colorScale),
splitList = splitList,
formatter = legendFormatter
) %>%
e_title(text = "Number of Cases/100K Population") %>%
e_tooltip() %>%
e_timeline_opts(
playInterval = 500,
left = "0%",
right = "0%",
currentIndex = length(unique(total$date)) - 1
) %>%
e_timeline_serie(
title = timeSeriesTitle
)
total %>%
group_by(date) %>%  #order_by(date)) %>%
e_charts(Countries, timeline = TRUE) %>%
e_map(`Number of cases/100k Population`) %>%
e_visual_map(`Number of cases/100k Population`,
type = "piecewise",
bottom = "20%",
left = "0%",
inRange = list(color = colorScale),
splitList = splitList,
formatter = legendFormatter
) %>%
e_title(text = "Number of Cases/100K Population") %>%
e_tooltip() %>%
e_timeline_opts(
playInterval = 500,
rewind = TRUE,
left = "0%",
right = "0%",
currentIndex = length(unique(total$date)) - 1
) %>%
e_timeline_serie(
title = timeSeriesTitle
)
total %>%
group_by(date) %>%  #order_by(date)) %>%
e_charts(Countries, timeline = TRUE) %>%
e_map(`Number of cases/100k Population`) %>%
e_visual_map(`Number of cases/100k Population`,
type = "piecewise",
bottom = "20%",
left = "0%",
inRange = list(color = colorScale),
splitList = splitList,
formatter = legendFormatter
) %>%
e_title(text = "Number of Cases/100K Population") %>%
e_tooltip() %>%
e_timeline_opts(
playInterval = 200,
left = "0%",
right = "0%",
currentIndex = length(unique(total$date)) - 1
) %>%
e_timeline_serie(
title = timeSeriesTitle
)
total %>%
group_by(date) %>%  #order_by(date)) %>%
e_charts(Countries, timeline = TRUE) %>%
e_map(`Number of cases/100k Population`) %>%
e_visual_map(`Number of cases/100k Population`,
type = "piecewise",
bottom = "20%",
left = "0%",
inRange = list(color = colorScale),
splitList = splitList,
formatter = legendFormatter
) %>%
e_title(text = "Number of Cases/100K Population") %>%
e_tooltip() %>%
e_timeline_opts(
playInterval = 200,
left = "0%",
right = "0%",
currentIndex = length(unique(total$date)) - 1
) %>%
e_timeline_serie(
#title = timeSeriesTitle
)
rm(list=ls(all.names = TRUE))
library(rjson)
library(jsonlite)
url <- paste0("https://ecomfe.github.io/echarts-examples/",
"public/data-gl/asset/data/population.json")
data <- jsonlite::fromJSON(url)
url
url <- paste0("https://ecomfe.github.io/echarts-examples/","public/data-gl/asset/data/population.json")
data <- jsonlite::fromJSON(url)
library(echarts4r)
help(e_globe)
library(robservable)
shiny::runApp('server')
runApp('server')
load("/Users/yusterronoh/Downloads/V4_T2.40.rda")
View(V4_T2.40)
rm(V4_T2.40)
load("/Users/yusterronoh/Downloads/V1_T2.5.rda")
View(V1_T2.5)
load("/Users/yusterronoh/Downloads/V1_T2.7.rda")
View(V1_T2.7)
rm(list=ls())
runApp('server')
library(pdftools)
Kenya_census <- "/Users/yusterronoh//Downloads/2019kecensus.pdf" #/Users/yusterronoh/Downloads
census_table <- pdf_text(Kenya_census)
census_table
Kenya_census <- "/Users/yusterronoh//Downloads/2019kecensus.pdf" #/Users/yusterronoh/Downloads
census_table <- pdf_text(Kenya_census)
census_table
Kenya_census <- "/Users/yusterronoh//Downloads/2019kecensus.pdf" #/Users/yusterronoh/Downloads
census_table <- pdf_text(Kenya_census)
census_table
census_table <- pdf_data(Kenya_census)
census_table
result <- pdf_text(Kenya_census) %>%
# split filecontent by newline character
str_split("\n") %>%
# convert to tibble and assign unique column names
as_tibble(.name_repair = make.names) %>%
# extract the data of each column by position
mutate(
National = str_sub(X, 0, 5),
county = str_sub(X, 6, 55),
subcounty = str_sub(X, 56, 67),
total = str_sub(X, 68, 75),
male = str_sub(X, 76, 92),
female = str_sub(X, 93),
fhh = str_sub(X, 94)
) %>%
# remove original string
select(-X) %>%
# remove white spaces around values
mutate_all(str_trim)
library(tidyverse)
result <- pdf_text(Kenya_census) %>%
# split filecontent by newline character
str_split("\n") %>%
# convert to tibble and assign unique column names
as_tibble(.name_repair = make.names) %>%
# extract the data of each column by position
mutate(
National = str_sub(X, 0, 5),
county = str_sub(X, 6, 55),
subcounty = str_sub(X, 56, 67),
total = str_sub(X, 68, 75),
male = str_sub(X, 76, 92),
female = str_sub(X, 93),
fhh = str_sub(X, 94)
) %>%
# remove original string
select(-X) %>%
# remove white spaces around values
mutate_all(str_trim)
rlang::last_error()`
addaghc
)))
``
rlang::last_error()
result <- pdf_text(Kenya_census)
result <- pdf_text(Kenya_census) %>%
# split filecontent by newline character
str_split("\n") %>%
# convert to tibble and assign unique column names
as_tibble(.name_repair = make.names)
current_lines <- result %>%
str_split("\n") %>%
first() %>%
as_tibble()
View(current_lines)
current_lines <- result %>%
str_split("\n") %>%
second() %>%
as_tibble()
current_lines <- result %>%
str_split("\n") %>%
first2() %>%
as_tibble()
current_lines <- result %>%
str_split("\n") %>%
first(3) %>%
as_tibble()
View(current_lines)
rm(list=ls(all.names = TRUE))
shiny::runApp('server')
runApp('server')
shiny::runApp('server')
runApp('server')
shiny::runApp('server')
runApp('server')
shinydashboardPlusGallery()
library(shinydashboardPlus)
shinydashboardPlusGallery()
runApp('server')
detach("package:shinydashboardPlus", unload = TRUE)
detach("package:shinydashboard", unload = TRUE)
detach("package:shinyjs", unload = TRUE)
detach("package:shinycssloaders", unload = TRUE)
detach("package:shinyBS", unload = TRUE)
detach("package:shiny.i18n", unload = TRUE)
detach("package:shiny", unload = TRUE)
library(devtools)
devtools::install_github("RinteRface/shinydashboardPlus")
shiny::runApp('server')
runApp('server')
remove.packages("shinydashboardPlus")
install.packages("shinydashboardPlus")
shiny::runApp('server')
runApp('server')
library(devtools)
devtools::install_github("RinteRface/shinydashboardPlus")
shiny::runApp('server')
runApp('server')
?widgetUserBox
?userBox
runApp('server')
options(shiny.reactlog=TRUE)
runApp('server')
?image
?userPost
runApp('server')
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
install.packages(c("AMR", "callr", "clipr", "distributional", "igraph", "mixmeta", "ps", "psych", "Rdpack", "rgdal", "rlang", "RNifti", "rnoaa", "shinyWidgets", "sp", "stringdist", "sunburstR", "suppdata", "timetk", "tsibble", "usmap"))
install.packages("rgdal")
file.path("myfolder")
paste0("rdirectory", "/","dashb")
library(robservable)
#https://observablehq.com/@yuster0/covd-19-montenegro
robservable("@yuster0/covd-19-montenegro")
shiny::runApp()
