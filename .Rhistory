shiny::runApp('server')
runApp('server')
shiny::runApp('server')
library(shiny)
library(shinydashboard)
library(data.table)
library(DT)
library(ggplot2)
library(shinycssloaders)
library(shinydashboardPlus)
library(shinyWidgets)
library(leaflet)
library(rjson)
library(htmltools)
library(leaflet.minicharts)
library(echarts4r)
library(sparkline)
library(shinyBS)
library(shiny.i18n)
library(countup)
runApp('server')
getFinalAndDiff <- function(vector) {
index <- length(vector)
return(list("final" = vector[index], "diff" = vector[index] - vector[index - 1]))
}
runApp('server')
Component.MainValueBox <-
function(mainValue,
mainValueSub,
sparklineName,
diffNumber,
text,
icon,
color) {
valueBox(
width = 6,
value = tagList(
countup(mainValue),
tags$small(paste0("| ", mainValueSub),
style = "color:white;font-size:16px;margin-top:10px;margin-right:10px;opacity:0.8"
)
),
subtitle = tagList(
"ã€€",
sparklineOutput(sparklineName),
tags$span(
countup(diffNumber),
getChangeIconWrapper(diffNumber),
text,
style = "float:right;"
)
),
icon = icon(icon),
color = color
)
}
runApp('server')
getFinalAndDiff <- function(vector) {
index <- length(vector)
return(list("final" = vector[index], "diff" = vector[index] - vector[index - 1]))
}
getFileUpdateTime <- function(file) {
fileUpdateTime <- file.info(file)$mtime
latestUpdateDuration <- difftime(Sys.time(), fileUpdateTime)
return(paste0(round(latestUpdateDuration[[1]], 0)
))
}
convertUnit2Ja <- function(x) {
x <- as.character(units(x))
if (x == "secs") {
} else if (x == "mins") {
} else if (x == "hours") {
} else if (x == "days") {
} else if (x == "weeks") {
} else {
return(paste(x, "ago"))
}
getChangeIcon <- function(number) {
if (number > 0) {
return("fa fa-caret-up")
} else if (number < 0) {
return("fa fa-caret-down")
} else {
return("fa fa-lock")
}
getChangeIcon_ <- function(number) {
if (number > 0) {
return(icon("caret-up"))
} else if (number < 0) {
return(icon("caret-down"))
} else {
return(icon("lock"))
}
getChangeIconWrapper <- function(number, type = "icon") {
if (type == "icon") {
return(getChangeIcon_(number))
} else {
return(getChangeIcon(number))
}
getDiffValueAndSign <- function(number) {
if (number >= 0) {
return(paste0("+", number))
} else {
return(number)
}
generateColorStyle <- function(data, colors, by) {
breaks <- seq(0, max(ifelse(is.na(data), 0, data), na.rm = T), by = by)
colorPanel <- colorRampPalette(colors)(length(breaks) + 1)
return(list(cuts = breaks, values = colorPanel))
}
runApp('server')
t(
#       icon("map-marked-alt"),
#       ("Situation in Each Prefecture")
#     ),
#     closable = F,
#     collapsible = T,
#     width = 12,
#     tabsetPanel(
#       source(
#         file = paste0(COMPONENT_PATH, "/Main/ConfirmedMap.ui.R"),
#         local = T,
)
runApp('server')
mhlwSummaryPath <- paste0(DATA_PATH, "/MHLW/summary.csv")
DATA_PATH <- "~/OneDrive/rdirectory/dashb/Dashboard/"
mhlwSummaryPath <- paste0(DATA_PATH, "/MHLW/summary.csv")
mhlwSummary <- fread(file = mhlwSummaryPath)
View(mhlwSummary)
colnames(mhlwSummary)
DATA_PATH <- "~/OneDrive/rdirectory/dashb/Dashboard/"
mhlwSummaryPath <- paste0(DATA_PATH, "/MHLW/summary1.csv")
mhlwSummary <- fread(file = mhlwSummaryPath)
mhlwSummary$date <- as.Date(as.character(mhlwSummary$date), "%Y%m%d")
mhlwSummary <- mhlwSummary[order(Name_region, date)]
setnafill(mhlwSummary, type = "locf", cols = c("Positive", "Discharged", "Tested"))
runApp('server')
mainValueSub = paste0(round(sum(mhlwSummary[date == max(date)]$Discharged)
)
DATA_PATH <- "~/OneDrive/rdirectory/dashb/Dashboard/"
mhlwSummaryPath <- paste0(DATA_PATH, "/MHLW/summary1.csv")
mhlwSummary <- fread(file = mhlwSummaryPath)
mhlwSummary$date <- as.Date(as.character(mhlwSummary$date), "%Y%m%d")
mhlwSummary <- mhlwSummary[order(Name_region, date)]
setnafill(mhlwSummary, type = "locf", cols = c("Positive", "Discharged", "Tested"))
runApp('server')
mhl <- fread("~/OneDrive/rdirectory/dashb/Dashboard/MHLW/summary.csv")
mhl
colnames(mhl)
colnames(mhlwSummary)
output$pcrSparkLine <- renderSparkline({
sparkline(
tail(mhlwSummary[, .(cumsum = sum(Positive, na.rm = T)), by = "date"][, .(diff = cumsum - shift(cumsum))], n = 28)[[1]],
type = "bar", width = 100, barColor = "white"
)
})
output$confirmedSparkLine <- renderSparkline({
value <- rowSums(byDate[, 2:ncol(byDate), with = T])
value <- value[(length(value) - 28):length(value)]
sparkline(value, type = "bar", width = 100, barColor = "white")
})
output$dischargeSparkLine <- renderSparkline({
sparkline(
tail(mhlwSummary[, .(cumsum = sum(Discharged, na.rm = T)), by = "date"][, .(diff = cumsum - shift(cumsum))], n = 28)[[1]],
type = "bar", width = 100, barColor = "white"
)
})
output$deathSparkLine <- renderSparkline({
value <- rowSums(death[, 2:ncol(death), with = T])
value <- value[(length(value) - 28):length(value)]
sparkline(value, type = "bar", width = 100, barColor = "white")
})
runApp('server')
